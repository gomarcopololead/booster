import { BoosterConfig } from '@boostercloud/framework-types'
import { K8sManagement } from './k8s-sdk/k8s-management'
import { HelmManager } from './helm-manager'
import { DeployManager } from './deploy-manager'
import { DaprManager } from './dapr-manager'
import { Promises, getLogger } from '@boostercloud/framework-common-helpers'
export interface BoosterK8sConfiguration extends BoosterConfig {
  context?: string
}

export const deploy = (config: BoosterConfig): Promise<void> => deployBoosterApp(config)

export const nuke = (config: BoosterConfig): Promise<void> => nukeBoosterApp(config)

async function deployBoosterApp(config: BoosterK8sConfiguration): Promise<void> {
  const logger = getLogger(config, 'index#deployBoosterApp')
  const clusterManager = new K8sManagement(config)
  const helmManager = new HelmManager(config)
  const daprManager = new DaprManager(config, clusterManager, helmManager)
  const deployManager = new DeployManager(config, clusterManager, daprManager, helmManager)
  if (config.context) {
    logger.info(`Setting Kubectl context to ${config.context}`)
    await clusterManager.setClusterContext(config.context)
  }
  logger.info('Checking your cluster and installed tools')
  await Promises.allSettledAndFulfilled([deployManager.ensureNamespaceExists(), deployManager.ensureHelmIsReady()])
  logger.info('Checking your volume claim')
  await deployManager.ensureVolumeClaimExists()
  logger.info('Deploying all necessary services')
  await deployManager.setServiceType()
  await Promises.allSettledAndFulfilled([
    deployManager.ensureUploadServiceExists(),
    deployManager.ensureBoosterServiceExists(),
  ])
  logger.info('Checking your Dapr services and event store')
  await Promises.allSettledAndFulfilled([deployManager.ensureDaprExists(), deployManager.ensureEventStoreExists()])
  logger.info('Waiting for cluster to be ready to receive your code')
  await deployManager.ensureUploadPodExists()
  logger.info('Packing and uploading your code into the cluster')
  await deployManager.uploadUserCode()
  logger.info('Deploying your booster app ðŸš€')
  const serviceURL = await deployManager.deployBoosterApp(
    daprManager.eventStoreHost,
    daprManager.eventStoreUser,
    daprManager.eventStorePassword
  )
  logger.info(`Your app is ready in this url: http://${serviceURL}/graphql`)
}

async function nukeBoosterApp(config: BoosterK8sConfiguration): Promise<void> {
  const logger = getLogger(config, 'index#nukeBoosterApp')
  const clusterManager = new K8sManagement(config)
  const helmManager = new HelmManager(config)
  const daprManager = new DaprManager(config, clusterManager, helmManager)
  const deployManager = new DeployManager(config, clusterManager, daprManager, helmManager)
  if (config.context) {
    logger.info(`Setting Kubectl context to ${config.context}`)
    await clusterManager.setClusterContext(config.context)
  }
  logger.info('Nuking your Booster project ðŸ§¨')
  await deployManager.deleteDapr()
  logger.info('Nuking your event store if it was generated by Booster')
  await deployManager.deleteRedis()
  logger.info('Finishing to delete all resources')
  await deployManager.deleteAllResources()
  logger.info('Your app is terminated and destroyed ðŸ’¥')
}
